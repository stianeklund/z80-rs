use std::fmt;
use std::fmt::Formatter;

#[derive(Default)]
pub struct Instruction {
    pub name: String,   // Mnemonic
    pub bytes: u8,      // Instruction size (bytes)
    pub cycles: u8,     // Clock cycles (if branch taken)
    pub alt_cycles: u8, // If not branch taken etc.
    pub opcode: u16,
}

impl fmt::UpperHex for Instruction {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let val = self;
        write!(f, "{:X}", val)
    }
}
impl fmt::Debug for Instruction {
    fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {
        fmt.align();
        writeln!(fmt)?;
        writeln!(fmt, "Instruction :{}", self.name)?;
        writeln!(fmt, "Opcode      :{:04x}", self.opcode)?;
        writeln!(fmt, "Size        :{}", self.bytes)?;
        writeln!(fmt, "Cycles      :{}", self.cycles)?;
        writeln!(fmt, "Alt cycles  :{}", self.alt_cycles)?;
        writeln!(fmt)
    }
}

#[derive(Debug, Copy, Clone, Eq, PartialEq, PartialOrd)]
pub enum Register {
    A,
    B,
    C,
    D,
    E,
    H,
    L,
    M,
    I,
    R,
    BC,
    DE,
    HL,
    SP,
    IX,
    IXH,
    IXL,
    IY,
    IYH,
    IYL,
    AF,
}

impl fmt::UpperHex for Register {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let val = self;
        write!(f, "{:X}", val)
    }
}

impl Instruction {
    pub fn default() -> Self {
        Self {
            name: String::with_capacity(5),
            bytes: 0,
            cycles: 0,
            alt_cycles: 0,
            opcode: 0,
        }
    }

    pub fn from(mnemonic: &str, size: u8, cycles: u8, alt_cycles: u8, opcode: u16) -> Instruction {
        Instruction {
            // name: mnemonic.to_string().pad_to_width_with_alignment(12, Alignment::Left),
            name: format!("{:w$}", mnemonic, w = 12),
            bytes: size,
            cycles,
            alt_cycles,
            opcode,
        }
    }
    // Used for debugging, contains all of the known opcodes, instruction cycles and alternative
    // branch cycles and the respective opcode
    pub fn decode(opcode: u16, next_op: u16) -> Option<Instruction> {
        // MNEMONIC, Byte size, CPU cycles, conditional extra cycles

        Option::from(match opcode {
            0x00 => Instruction::from("NOP", 1, 4, 0, 0x00),
            0x01 => Instruction::from("LD BC, **", 3, 10, 0, 0x0),
            0x02 => Instruction::from("LD (BC), A", 1, 7, 0, 0x01),
            0x03 => Instruction::from("INC BC", 1, 6, 0, 0x03),
            0x04 => Instruction::from("INC B", 1, 4, 0, 0x04),
            0x05 => Instruction::from("DEC B", 1, 4, 0, 0x05),
            0x06 => Instruction::from("LD B, *", 2, 7, 0, 0x06),
            0x07 => Instruction::from("RLCA", 1, 4, 0, 0x07),
            0x08 => Instruction::from("EX AF, AF'", 1, 4, 0, 0x08),
            0x09 => Instruction::from("ADD HL, BC", 1, 11, 0, 0x09),
            0x0A => Instruction::from("LD A, (BC)", 1, 7, 0, 0x0A),
            0x0B => Instruction::from("DEC BC", 1, 6, 0, 0x0B),
            0x0C => Instruction::from("INC C", 1, 4, 0, 0x0C),
            0x0D => Instruction::from("DEC C", 1, 4, 0, 0x0D),
            0x0E => Instruction::from("LD C, *", 2, 7, 0, 0x0E),
            0x0F => Instruction::from("RRCA", 1, 4, 0, 0x0F),
            0x10 => Instruction::from("DJNZ, *", 2, 13, 8, 0x10),
            0x11 => Instruction::from("LD DE, **", 3, 10, 0, 0x11),
            0x12 => Instruction::from("LD (DE), A", 1, 7, 0, 0x12),
            0x13 => Instruction::from("INC DE", 1, 6, 0, 0x13),
            0x14 => Instruction::from("INC D", 1, 4, 0, 0x14),
            0x15 => Instruction::from("DEC D", 1, 4, 0, 0x15),
            0x16 => Instruction::from("LD D", 2, 7, 0, 0x16),
            0x17 => Instruction::from("RLA", 1, 4, 0, 0x17),
            0x18 => Instruction::from("JR *", 2, 12, 0, 0x18),
            0x19 => Instruction::from("ADD HL, DE,", 1, 11, 0, 0x19),
            0x1A => Instruction::from("LD A, (DE)", 1, 7, 0, 0x20),
            0x1B => Instruction::from("DEC DE", 1, 6, 0, 0x21),
            0x1C => Instruction::from("INC E", 1, 4, 0, 0x1C),
            0x1D => Instruction::from("DEC E", 1, 4, 0, 0x1D),
            0x1E => Instruction::from("LD E, *", 2, 7, 0, 0x1E),
            0x1F => Instruction::from("RRA", 1, 4, 0, 0x1F),
            0x20 => Instruction::from("JR NZ, *", 2, 12, 7, 0x20),
            0x21 => Instruction::from("LD HL, **", 3, 10, 0, 0x21),
            0x22 => Instruction::from("LD **, HL", 3, 16, 0, 0x22),
            0x23 => Instruction::from("INC HL", 1, 6, 0, 0x23),
            0x24 => Instruction::from("INC H", 1, 4, 0, 0x24),
            0x25 => Instruction::from("DEC H", 1, 4, 0, 0x25),
            0x26 => Instruction::from("LD H, *", 2, 7, 0, 0x26),
            0x27 => Instruction::from("DAA", 1, 4, 0, 0x27),
            0x28 => Instruction::from("JR Z, *", 2, 12, 7, 0x28),
            0x29 => Instruction::from("ADD HL, HL", 1, 11, 0, 0x29),
            0x2A => Instruction::from("LD HL, (**)", 3, 16, 0, 0x2A),
            0x2B => Instruction::from("DEC HL", 1, 6, 0, 0x2B),
            0x2C => Instruction::from("INC L", 1, 4, 0, 0x2C),
            0x2D => Instruction::from("DEC L", 1, 4, 0, 0x2D),
            0x2E => Instruction::from("LD L, *", 2, 7, 0, 0x2E),
            0x2F => Instruction::from("CPL", 1, 4, 0, 0x2F),
            0x30 => Instruction::from("JR NC, *", 2, 12, 7, 0x30),
            0x31 => Instruction::from("LD SP", 3, 10, 0, 0x31),
            0x32 => Instruction::from("LD (**), A", 3, 13, 0, 0x32),
            0x33 => Instruction::from("INC SP", 1, 6, 0, 0x33),
            0x34 => Instruction::from("INC (HL)", 1, 11, 0, 0x34),
            0x35 => Instruction::from("DEC (HL)", 1, 11, 0, 0x35),
            0x36 => Instruction::from("LD (HL), *", 2, 10, 0, 0x36),
            0x37 => Instruction::from("SCF", 1, 4, 0, 0x37),
            0x38 => Instruction::from("JR C, *", 2, 12, 7, 0x38),
            0x39 => Instruction::from("ADD HL,SP", 1, 11, 0, 0x39),
            0x3A => Instruction::from("LD A, (**)", 3, 13, 0, 0x3A),
            0x3B => Instruction::from("DEC SP", 1, 6, 0, 0x3B),
            0x3C => Instruction::from("INC A", 1, 4, 0, 0x3C),
            0x3D => Instruction::from("DEC A", 1, 4, 0, 0x3D),
            0x3E => Instruction::from("LD A, *", 2, 7, 0, 0x3E),
            0x3F => Instruction::from("CCF", 1, 4, 0, 0x3F),
            0x40 => Instruction::from("LD B, B", 1, 4, 0, 0x40),
            0x41 => Instruction::from("LD B, C", 1, 4, 0, 0x41),
            0x42 => Instruction::from("LD B, D", 1, 4, 0, 0x42),
            0x43 => Instruction::from("LD B, E", 1, 4, 0, 0x43),
            0x44 => Instruction::from("LD B, H", 1, 4, 0, 0x44),
            0x45 => Instruction::from("LD B, L", 1, 4, 0, 0x45),
            0x46 => Instruction::from("LD B, (HL)", 1, 7, 0, 0x46),
            0x47 => Instruction::from("LD B, A", 1, 4, 0, 0x47),
            0x48 => Instruction::from("LD C, B", 1, 4, 0, 0x48),
            0x49 => Instruction::from("LD C, C", 1, 4, 0, 0x49),
            0x4A => Instruction::from("LD C, D", 1, 4, 0, 0x4A),
            0x4B => Instruction::from("LD C, E", 1, 4, 0, 0x4B),
            0x4C => Instruction::from("LD C, H", 1, 4, 0, 0x4C),
            0x4D => Instruction::from("LD C, L", 1, 4, 0, 0x4D),
            0x4E => Instruction::from("LD C, (HL)", 1, 7, 0, 0x4E),
            0x4F => Instruction::from("LD C, A", 1, 4, 0, 0x4F),
            0x50 => Instruction::from("LD D, B", 1, 4, 0, 0x50),
            0x51 => Instruction::from("LD D, C", 1, 4, 0, 0x51),
            0x52 => Instruction::from("LD D, D", 1, 4, 0, 0x52),
            0x53 => Instruction::from("LD D, E", 1, 4, 0, 0x53),
            0x54 => Instruction::from("LD D, H", 1, 4, 0, 0x54),
            0x55 => Instruction::from("LD D, L", 1, 4, 0, 0x55),
            0x56 => Instruction::from("LD D, (HL)", 1, 7, 0, 0x56),
            0x57 => Instruction::from("LD D, A", 1, 4, 0, 0x57),
            0x58 => Instruction::from("LD E, B", 1, 4, 0, 0x58),
            0x59 => Instruction::from("LD E, C", 1, 4, 0, 0x59),
            0x5A => Instruction::from("LD E, D", 1, 4, 0, 0x5A),
            0x5B => Instruction::from("LD E, E", 1, 4, 0, 0x5B),
            0x5C => Instruction::from("LD E, H", 1, 4, 0, 0x5C),
            0x5D => Instruction::from("LD E, L", 1, 4, 0, 0x5D),
            0x5E => Instruction::from("LD E, (HL)", 1, 7, 0, 0x5E),
            0x5F => Instruction::from("LD E, A", 1, 4, 0, 0x5F),
            0x60 => Instruction::from("LD H, B", 1, 4, 0, 0x60),
            0x61 => Instruction::from("LD H, C", 1, 4, 0, 0x61),
            0x62 => Instruction::from("LD H, D", 1, 4, 0, 0x62),
            0x63 => Instruction::from("LD H, E", 1, 4, 0, 0x63),
            0x64 => Instruction::from("LD H, H", 1, 4, 0, 0x64),
            0x65 => Instruction::from("LD H, L", 1, 4, 0, 0x65),
            0x66 => Instruction::from("LD H, (HL)", 1, 7, 0, 0x66),
            0x67 => Instruction::from("LD H, A", 1, 4, 0, 0x67),
            0x68 => Instruction::from("LD L, B", 1, 4, 0, 0x68),
            0x69 => Instruction::from("LD L, C", 1, 4, 0, 0x69),
            0x6A => Instruction::from("LD L, D", 1, 4, 0, 0x6A),
            0x6B => Instruction::from("LD L, E", 1, 4, 0, 0x6B),
            0x6C => Instruction::from("LD L, H", 1, 4, 0, 0x6C),
            0x6D => Instruction::from("LD L, L", 1, 4, 0, 0x6D),
            0x6E => Instruction::from("LD L, (HL)", 1, 7, 0, 0x6E),
            0x6F => Instruction::from("LD L, A", 1, 4, 0, 0x6F),
            0x70 => Instruction::from("LD (HL), B", 1, 7, 0, 0x70),
            0x71 => Instruction::from("LD (HL), C", 1, 7, 0, 0x71),
            0x72 => Instruction::from("LD (HL), D", 1, 7, 0, 0x72),
            0x73 => Instruction::from("LD (HL), E", 1, 7, 0, 0x73),
            0x74 => Instruction::from("LD (HL), H", 1, 7, 0, 0x74),
            0x75 => Instruction::from("LD (HL), L", 1, 7, 0, 0x75),
            0x76 => Instruction::from("HALT", 1, 4, 0, 0x76),
            0x77 => Instruction::from("LD (HL), A)", 1, 7, 0, 0x77),
            0x78 => Instruction::from("LD A, B", 1, 4, 0, 0x78),
            0x79 => Instruction::from("LD A, C", 1, 4, 0, 0x79),
            0x7A => Instruction::from("LD A, D", 1, 4, 0, 0x7A),
            0x7B => Instruction::from("LD A, E", 1, 4, 0, 0x7B),
            0x7C => Instruction::from("LD A, H", 1, 4, 0, 0x7C),
            0x7D => Instruction::from("LD A, L", 1, 4, 0, 0x7D),
            0x7E => Instruction::from("LD A, (HL)", 1, 7, 0, 0x7E),
            0x7F => Instruction::from("LD A, A", 1, 7, 0, 0x7F),
            0x80 => Instruction::from("ADD B", 1, 4, 0, 0x80),
            0x81 => Instruction::from("ADD C", 1, 4, 0, 0x81),
            0x82 => Instruction::from("ADD D", 1, 4, 0, 0x82),
            0x83 => Instruction::from("ADD E", 1, 4, 0, 0x83),
            0x84 => Instruction::from("ADD H", 1, 4, 0, 0x84),
            0x85 => Instruction::from("ADD L", 1, 4, 0, 0x85),
            0x86 => Instruction::from("ADD A, (HL)", 1, 7, 0, 0x86),
            0x87 => Instruction::from("ADD A", 1, 4, 0, 0x87),
            0x88 => Instruction::from("ADC B", 1, 4, 0, 0x88),
            0x89 => Instruction::from("ADC C", 1, 4, 0, 0x89),
            0x8A => Instruction::from("ADC D", 1, 4, 0, 0x8A),
            0x8B => Instruction::from("ADC E", 1, 4, 0, 0x8B),
            0x8C => Instruction::from("ADC H", 1, 4, 0, 0x8C),
            0x8D => Instruction::from("ADC L", 1, 4, 0, 0x8D),
            0x8E => Instruction::from("ADC (HL)", 1, 7, 0, 0x8E),
            0x8F => Instruction::from("ADC A", 1, 4, 0, 0x8F),
            0x90 => Instruction::from("SUB B", 1, 4, 0, 0x90),
            0x91 => Instruction::from("SUB C", 1, 4, 0, 0x91),
            0x92 => Instruction::from("SUB D", 1, 4, 0, 0x92),
            0x93 => Instruction::from("SUB E", 1, 4, 0, 0x93),
            0x94 => Instruction::from("SUB H", 1, 4, 0, 0x94),
            0x95 => Instruction::from("SUB L", 1, 4, 0, 0x95),
            0x96 => Instruction::from("SUB (HL)", 1, 7, 0, 0x96),
            0x97 => Instruction::from("SUB A", 1, 4, 0, 0x97),
            0x98 => Instruction::from("SBB B", 1, 4, 0, 0x98),
            0x99 => Instruction::from("SBB C", 1, 4, 0, 0x99),
            0x9A => Instruction::from("SBB D", 1, 4, 0, 0x9A),
            0x9B => Instruction::from("SBB E", 1, 4, 0, 0x9B),
            0x9C => Instruction::from("SBB H", 1, 4, 0, 0x9C),
            0x9D => Instruction::from("SBB L", 1, 4, 0, 0x9D),
            0x9E => Instruction::from("SBB (HL)", 1, 7, 0, 0x9E),
            0x9F => Instruction::from("SBB A", 1, 4, 0, 0x9F),
            0xA0 => Instruction::from("AND B", 1, 4, 0, 0xA0),
            0xA1 => Instruction::from("AND C", 1, 4, 0, 0xA1),
            0xA2 => Instruction::from("AND D", 1, 4, 0, 0xA2),
            0xA3 => Instruction::from("AND E", 1, 4, 0, 0xA3),
            0xA4 => Instruction::from("AND H", 1, 4, 0, 0xA4),
            0xA5 => Instruction::from("AND L", 1, 4, 0, 0xA5),
            0xA6 => Instruction::from("AND (HL)", 1, 7, 0, 0xA6),
            0xA7 => Instruction::from("AND A", 1, 4, 0, 0xA7),
            0xA8 => Instruction::from("XOR B", 1, 4, 0, 0xA8),
            0xA9 => Instruction::from("XOR C", 1, 4, 0, 0xA9),
            0xAA => Instruction::from("XOR D", 1, 4, 0, 0xAA),
            0xAB => Instruction::from("XOR E", 1, 4, 0, 0xAB),
            0xAC => Instruction::from("XOR H", 1, 4, 0, 0xAC),
            0xAD => Instruction::from("XOR L", 1, 4, 0, 0xAD),
            0xAE => Instruction::from("XOR (HL)", 1, 7, 0, 0xAE),
            0xAF => Instruction::from("XOR A", 1, 4, 0, 0xAF),
            0xB0 => Instruction::from("OR B", 1, 4, 0, 0xB0),
            0xB1 => Instruction::from("OR C", 1, 4, 0, 0xB1),
            0xB2 => Instruction::from("OR D", 1, 4, 0, 0xB2),
            0xB3 => Instruction::from("OR E", 1, 4, 0, 0xB3),
            0xB4 => Instruction::from("OR H", 1, 4, 0, 0xB4),
            0xB5 => Instruction::from("OR L", 1, 4, 0, 0xB5),
            0xB6 => Instruction::from("OR (HL)", 1, 7, 0, 0xB6),
            0xB7 => Instruction::from("OR A", 1, 4, 0, 0xB7),
            0xB8 => Instruction::from("CP B", 1, 4, 0, 0xB8),
            0xB9 => Instruction::from("CP C", 1, 4, 0, 0xB9),
            0xBA => Instruction::from("CP D", 1, 4, 0, 0xBA),
            0xBB => Instruction::from("CP E", 1, 4, 0, 0xBB),
            0xBC => Instruction::from("CP H", 1, 4, 0, 0xBC),
            0xBD => Instruction::from("CP L", 1, 4, 0, 0xBD),
            0xBE => Instruction::from("CP (HL)", 1, 7, 0, 0xBE),
            0xBF => Instruction::from("CP A", 1, 4, 0, 0xBF),
            0xC0 => Instruction::from("RET NZ", 1, 11, 5, 0xC0),
            0xC1 => Instruction::from("POP BC", 1, 10, 0, 0xC1),
            0xC2 => Instruction::from("JP NZ, **", 3, 10, 0, 0xC2),
            0xC3 => Instruction::from("JP **", 3, 10, 0, 0xC3),
            0xC4 => Instruction::from("CALL NZ, **", 3, 17, 10, 0xC4),
            0xC5 => Instruction::from("PUSH BC", 1, 11, 0, 0xC5),
            0xC6 => Instruction::from("ADD A, *", 2, 7, 0, 0xC6),
            0xC7 => Instruction::from("RST 00H", 1, 11, 0, 0xC7),
            0xC8 => Instruction::from("RET Z", 1, 11, 5, 0xC8),
            0xC9 => Instruction::from("RET", 1, 10, 0, 0xC9),
            0xCA => Instruction::from("JP Z, **", 3, 10, 0, 0xCA),
            0xCB => match next_op {
                0x00 => Instruction::from("RLC B", 2, 8, 0, 0xCB00),
                0x01 => Instruction::from("RLC C", 2, 8, 0, 0xCB01),
                0x02 => Instruction::from("RLC D", 2, 8, 0, 0xCB02),
                0x03 => Instruction::from("RLC E", 2, 8, 0, 0xCB03),
                0x04 => Instruction::from("RLC H", 2, 8, 0, 0xCB04),
                0x05 => Instruction::from("RLC L", 2, 8, 0, 0xCB05),
                0x06 => Instruction::from("RLC (HL)", 2, 15, 0, 0xCB06),
                0x07 => Instruction::from("RLC A", 2, 8, 0, 0xCB07),
                0x08 => Instruction::from("RRC B", 2, 8, 0, 0xCB08),
                0x09 => Instruction::from("RRC C", 2, 8, 0, 0xCB09),
                0x0A => Instruction::from("RRC D", 2, 8, 0, 0xCB0A),
                0x0B => Instruction::from("RRC E", 2, 8, 0, 0xCB0B),
                0x0C => Instruction::from("RRC H", 2, 8, 0, 0xCB0C),
                0x0D => Instruction::from("RRC L", 2, 8, 0, 0xCB0D),
                0x0E => Instruction::from("RRC (HL)", 2, 15, 0, 0xCB0E),
                0x0F => Instruction::from("RRC A", 2, 8, 0, 0xCB0F),
                0x10 => Instruction::from("RL B", 2, 8, 0, 0xCB10),
                0x11 => Instruction::from("RL C", 2, 8, 0, 0xCB11),
                0x12 => Instruction::from("RL D", 2, 8, 0, 0xCB12),
                0x13 => Instruction::from("RL E", 2, 8, 0, 0xCB13),
                0x14 => Instruction::from("RL H", 2, 8, 0, 0xCB14),
                0x15 => Instruction::from("RL L", 2, 8, 0, 0xCB15),
                0x16 => Instruction::from("RL (HL)", 2, 15, 0, 0xCB16),
                0x17 => Instruction::from("RL A", 2, 8, 0, 0xCB17),
                0x18 => Instruction::from("RR B", 2, 8, 0, 0xCB18),
                0x19 => Instruction::from("RR C", 2, 8, 0, 0xCB19),
                0x1A => Instruction::from("RR D", 2, 8, 0, 0xCB1A),
                0x1B => Instruction::from("RR E", 2, 8, 0, 0xCB1B),
                0x1C => Instruction::from("RR H", 2, 8, 0, 0xCB1C),
                0x1D => Instruction::from("RR L", 2, 8, 0, 0xCB1D),
                0x1E => Instruction::from("RR (HL)", 2, 15, 0, 0xCB1E),
                0x1F => Instruction::from("RR A", 2, 8, 0, 0xCB1F),
                0x20 => Instruction::from("SLA B", 2, 8, 0, 0xCB20),
                0x21 => Instruction::from("SLA C", 2, 8, 0, 0xCB21),
                0x22 => Instruction::from("SLA D", 2, 8, 0, 0xCB22),
                0x23 => Instruction::from("SLA E", 2, 8, 0, 0xCB23),
                0x24 => Instruction::from("SLA H", 2, 8, 0, 0xCB24),
                0x25 => Instruction::from("SLA L", 2, 8, 0, 0xCB25),
                0x26 => Instruction::from("SLA (HL)", 2, 15, 0, 0xCB26),
                0x27 => Instruction::from("SLA A", 2, 8, 0, 0xCB27),
                0x28 => Instruction::from("SRA B", 2, 8, 0, 0xCB28),
                0x29 => Instruction::from("SRA C", 2, 8, 0, 0xCB29),
                0x2A => Instruction::from("SRA D", 2, 8, 0, 0xCB2A),
                0x2B => Instruction::from("SRA E", 2, 8, 0, 0xCB2B),
                0x2C => Instruction::from("SRA H", 2, 8, 0, 0xCB2C),
                0x2D => Instruction::from("SRA L", 2, 8, 0, 0xCB2D),
                0x2E => Instruction::from("SRA (HL)", 2, 15, 0, 0xCB2E),
                0x2F => Instruction::from("SRA A", 2, 8, 0, 0xCB2F),
                0x30 => Instruction::from("SLL B", 2, 8, 0, 0xCB30),
                0x31 => Instruction::from("SLL C", 2, 8, 0, 0xCB31),
                0x32 => Instruction::from("SLL D", 2, 8, 0, 0xCB32),
                0x33 => Instruction::from("SLL E", 2, 8, 0, 0xCB33),
                0x34 => Instruction::from("SLL H", 2, 8, 0, 0xCB34),
                0x35 => Instruction::from("SLL L", 2, 8, 0, 0xCB35),
                0x36 => Instruction::from("SLL (HL)", 2, 15, 0, 0xCB36),
                0x37 => Instruction::from("SLL A", 2, 8, 0, 0xCB37),
                0x38 => Instruction::from("SRL B", 2, 8, 0, 0xCB38),
                0x39 => Instruction::from("SRL C", 2, 8, 0, 0xCB39),
                0x3A => Instruction::from("SRL D", 2, 8, 0, 0xCB3A),
                0x3B => Instruction::from("SRL E", 2, 8, 0, 0xCB3B),
                0x3C => Instruction::from("SRL H", 2, 8, 0, 0xCB3C),
                0x3D => Instruction::from("SRL L", 2, 8, 0, 0xCB3D),
                0x3E => Instruction::from("SRL (HL)", 2, 15, 0, 0xCB3E),
                0x3F => Instruction::from("SRL A", 2, 8, 0, 0xCB3F),
                0x40 => Instruction::from("BIT 0, B", 2, 8, 0, 0xCB40),
                0x41 => Instruction::from("BIT 0, C", 2, 8, 0, 0xCB41),
                0x42 => Instruction::from("BIT 0, D", 2, 8, 0, 0xCB42),
                0x43 => Instruction::from("BIT 0, E", 2, 8, 0, 0xCB43),
                0x44 => Instruction::from("BIT 0, H", 2, 8, 0, 0xCB44),
                0x45 => Instruction::from("BIT 0, L", 2, 8, 0, 0xCB45),
                0x46 => Instruction::from("BIT 0, (HL)", 2, 12, 0, 0xCB46),
                0x47 => Instruction::from("BIT 0, A", 2, 8, 0, 0xCB47),
                0x48 => Instruction::from("BIT 1, B", 2, 8, 0, 0xCB48),
                0x49 => Instruction::from("BIT 1, C", 2, 8, 0, 0xCB49),
                0x4A => Instruction::from("BIT 1, D", 2, 8, 0, 0xCB4A),
                0x4B => Instruction::from("BIT 1, E", 2, 8, 0, 0xCB4B),
                0x4C => Instruction::from("BIT 1, H", 2, 8, 0, 0xCB4C),
                0x4D => Instruction::from("BIT 1, L", 2, 8, 0, 0xCB4D),
                0x4E => Instruction::from("BIT 1, (HL)", 2, 12, 0, 0xCB4E),
                0x4F => Instruction::from("BIT 1, A", 2, 8, 0, 0xCB4F),
                0x50 => Instruction::from("BIT 2, B", 2, 8, 0, 0xCB50),
                0x51 => Instruction::from("BIT 2, C", 2, 8, 0, 0xCB51),
                0x52 => Instruction::from("BIT 2, D", 2, 8, 0, 0xCB52),
                0x53 => Instruction::from("BIT 2, E", 2, 8, 0, 0xCB53),
                0x54 => Instruction::from("BIT 2, H", 2, 8, 0, 0xCB54),
                0x55 => Instruction::from("BIT 2, L", 2, 8, 0, 0xCB55),
                0x56 => Instruction::from("BIT 2, (HL)", 2, 12, 0, 0xCB56),
                0x57 => Instruction::from("BIT 2, A", 2, 8, 0, 0xCB57),
                0x58 => Instruction::from("BIT 3, B", 2, 8, 0, 0xCB58),
                0x59 => Instruction::from("BIT 3, C", 2, 8, 0, 0xCB59),
                0x5A => Instruction::from("BIT 3, D", 2, 8, 0, 0xCB5A),
                0x5B => Instruction::from("BIT 3, E", 2, 8, 0, 0xCB5B),
                0x5C => Instruction::from("BIT 3, H", 2, 8, 0, 0xCB5C),
                0x5D => Instruction::from("BIT 3, L", 2, 8, 0, 0xCB5D),
                0x5E => Instruction::from("BIT 3, (HL)", 2, 12, 0, 0xCB5E),
                0x5F => Instruction::from("BIT 3, A", 2, 8, 0, 0xCB5F),
                0x60 => Instruction::from("BIT 4, B", 2, 8, 0, 0xCB60),
                0x61 => Instruction::from("BIT 4, C", 2, 8, 0, 0xCB61),
                0x62 => Instruction::from("BIT 4, D", 2, 8, 0, 0xCB62),
                0x63 => Instruction::from("BIT 4, E", 2, 8, 0, 0xCB63),
                0x64 => Instruction::from("BIT 4, H", 2, 8, 0, 0xCB64),
                0x65 => Instruction::from("BIT 4, L", 2, 8, 0, 0xCB65),
                0x66 => Instruction::from("BIT 4, (HL)", 2, 12, 0, 0xCB66),
                0x67 => Instruction::from("BIT 4, A", 2, 8, 0, 0xCB67),
                0x68 => Instruction::from("BIT 5, B", 2, 8, 0, 0xCB68),
                0x69 => Instruction::from("BIT 5, C", 2, 8, 0, 0xCB69),
                0x6A => Instruction::from("BIT 5, D", 2, 8, 0, 0xCB6A),
                0x6B => Instruction::from("BIT 5, E", 2, 8, 0, 0xCB6B),
                0x6C => Instruction::from("BIT 5, H", 2, 8, 0, 0xCB6C),
                0x6D => Instruction::from("BIT 5, L", 2, 8, 0, 0xCB6D),
                0x6E => Instruction::from("BIT 5, (HL)", 2, 12, 0, 0xCB6E),
                0x6F => Instruction::from("BIT 5, A", 2, 8, 0, 0xCB6F),
                0x70 => Instruction::from("BIT 6, B", 2, 8, 0, 0xCB70),
                0x71 => Instruction::from("BIT 6, C", 2, 8, 0, 0xCB71),
                0x72 => Instruction::from("BIT 6, D", 2, 8, 0, 0xCB72),
                0x73 => Instruction::from("BIT 6, E", 2, 8, 0, 0xCB73),
                0x74 => Instruction::from("BIT 6, H", 2, 8, 0, 0xCB74),
                0x75 => Instruction::from("BIT 6, L", 2, 8, 0, 0xCB75),
                0x76 => Instruction::from("BIT 6, (HL)", 2, 12, 0, 0xCB76),
                0x77 => Instruction::from("BIT 6, A", 2, 8, 0, 0xCB77),
                0x78 => Instruction::from("BIT 7, B", 2, 8, 0, 0xCB78),
                0x79 => Instruction::from("BIT 7, C", 2, 8, 0, 0xCB79),
                0x7A => Instruction::from("BIT 7, D", 2, 8, 0, 0xCB7A),
                0x7B => Instruction::from("BIT 7, E", 2, 8, 0, 0xCB7B),
                0x7C => Instruction::from("BIT 7, H", 2, 8, 0, 0xCB7C),
                0x7D => Instruction::from("BIT 7, L", 2, 8, 0, 0xCB7D),
                0x7E => Instruction::from("BIT 7, (HL)", 2, 12, 0, 0xCB7E),
                0x7F => Instruction::from("BIT 7, A", 2, 8, 0, 0xCB7F),
                0x80 => Instruction::from("RES 0, B", 2, 8, 0, 0xCB80),
                0x81 => Instruction::from("RES 0, C", 2, 8, 0, 0xCB81),
                0x82 => Instruction::from("RES 0, D", 2, 8, 0, 0xCB82),
                0x83 => Instruction::from("RES 0, E", 2, 8, 0, 0xCB83),
                0x84 => Instruction::from("RES 0, H", 2, 8, 0, 0xCB84),
                0x85 => Instruction::from("RES 0, L", 2, 8, 0, 0xCB85),
                0x86 => Instruction::from("RES 0, (HL)", 2, 12, 0, 0xCB86),
                0x87 => Instruction::from("RES 0, A", 2, 8, 0, 0xCB87),
                0x88 => Instruction::from("RES 1, B", 2, 8, 0, 0xCB88),
                0x89 => Instruction::from("RES 1, C", 2, 8, 0, 0xCB89),
                0x8A => Instruction::from("RES 1, D", 2, 8, 0, 0xCB8A),
                0x8B => Instruction::from("RES 1, E", 2, 8, 0, 0xCB8B),
                0x8C => Instruction::from("RES 1, H", 2, 8, 0, 0xCB8C),
                0x8D => Instruction::from("RES 1, L", 2, 8, 0, 0xCB8D),
                0x8E => Instruction::from("RES 1, (HL)", 2, 12, 0, 0xCB8E),
                0x8F => Instruction::from("RES 1, A", 2, 8, 0, 0xCB8F),
                0x90 => Instruction::from("RES 2, B", 2, 8, 0, 0xCB90),
                0x91 => Instruction::from("RES 2, C", 2, 8, 0, 0xCB91),
                0x92 => Instruction::from("RES 2, D", 2, 8, 0, 0xCB92),
                0x93 => Instruction::from("RES 2, E", 2, 8, 0, 0xCB93),
                0x94 => Instruction::from("RES 2, H", 2, 8, 0, 0xCB94),
                0x95 => Instruction::from("RES 2, L", 2, 8, 0, 0xCB95),
                0x96 => Instruction::from("RES 2, (HL)", 2, 12, 0, 0xCB96),
                0x97 => Instruction::from("RES 2, A", 2, 8, 0, 0xCB97),
                0x98 => Instruction::from("RES 3, B", 2, 8, 0, 0xCB98),
                0x99 => Instruction::from("RES 3, C", 2, 8, 0, 0xCB99),
                0x9A => Instruction::from("RES 3, D", 2, 8, 0, 0xCB9A),
                0x9B => Instruction::from("RES 3, E", 2, 8, 0, 0xCB9B),
                0x9C => Instruction::from("RES 3, H", 2, 8, 0, 0xCB9C),
                0x9D => Instruction::from("RES 3, L", 2, 8, 0, 0xCB9D),
                0x9E => Instruction::from("RES 3, (HL)", 2, 12, 0, 0xCB9E),
                0x9F => Instruction::from("RES 3, A", 2, 8, 0, 0xCB9F),
                0xA0 => Instruction::from("RES 4, B", 2, 8, 0, 0xCBA0),
                0xA1 => Instruction::from("RES 4, C", 2, 8, 0, 0xCBA1),
                0xA2 => Instruction::from("RES 4, D", 2, 8, 0, 0xCBA2),
                0xA3 => Instruction::from("RES 4, E", 2, 8, 0, 0xCBA3),
                0xA4 => Instruction::from("RES 4, H", 2, 8, 0, 0xCBA4),
                0xA5 => Instruction::from("RES 4, L", 2, 8, 0, 0xCBA5),
                0xA6 => Instruction::from("RES 4, (HL)", 2, 12, 0, 0xCBA6),
                0xA7 => Instruction::from("RES 4, A", 2, 8, 0, 0xCBA7),
                0xA8 => Instruction::from("RES 5, B", 2, 8, 0, 0xCBA8),
                0xA9 => Instruction::from("RES 5, C", 2, 8, 0, 0xCBA9),
                0xAA => Instruction::from("RES 5, D", 2, 8, 0, 0xCBAA),
                0xAB => Instruction::from("RES 5, E", 2, 8, 0, 0xCBAB),
                0xAC => Instruction::from("RES 5, H", 2, 8, 0, 0xCBAC),
                0xAD => Instruction::from("RES 5, L", 2, 8, 0, 0xCBAD),
                0xAE => Instruction::from("RES 5, (HL)", 2, 12, 0, 0xCBAE),
                0xAF => Instruction::from("RES 5, A", 2, 8, 0, 0xCBAF),
                0xB0 => Instruction::from("RES 6, B", 2, 8, 0, 0xCBB0),
                0xB1 => Instruction::from("RES 6, C", 2, 8, 0, 0xCBB1),
                0xB2 => Instruction::from("RES 6, D", 2, 8, 0, 0xCBB2),
                0xB3 => Instruction::from("RES 6, E", 2, 8, 0, 0xCBB3),
                0xB4 => Instruction::from("RES 6, H", 2, 8, 0, 0xCBB4),
                0xB5 => Instruction::from("RES 6, L", 2, 8, 0, 0xCBB5),
                0xB6 => Instruction::from("RES 6, (HL)", 2, 12, 0, 0xCBB6),
                0xB7 => Instruction::from("RES 6, A", 2, 8, 0, 0xCBB7),
                0xB8 => Instruction::from("RES 7, B", 2, 8, 0, 0xCBB8),
                0xB9 => Instruction::from("RES 7, C", 2, 8, 0, 0xCBB9),
                0xBA => Instruction::from("RES 7, D", 2, 8, 0, 0xCBBA),
                0xBB => Instruction::from("RES 7, E", 2, 8, 0, 0xCBBB),
                0xBC => Instruction::from("RES 7, H", 2, 8, 0, 0xCBBC),
                0xBD => Instruction::from("RES 7, L", 2, 8, 0, 0xCBBD),
                0xBE => Instruction::from("RES 7, (HL)", 2, 12, 0, 0xCBBE),
                0xBF => Instruction::from("RES 7, A", 2, 8, 0, 0xCBBF),
                0xC0 => Instruction::from("SET 0, B", 2, 8, 0, 0xCBC0),
                0xC1 => Instruction::from("SET 0, C", 2, 8, 0, 0xCBC1),
                0xC2 => Instruction::from("SET 0, D", 2, 8, 0, 0xCBC2),
                0xC3 => Instruction::from("SET 0, E", 2, 8, 0, 0xCBC3),
                0xC4 => Instruction::from("SET 0, H", 2, 8, 0, 0xCBC4),
                0xC5 => Instruction::from("SET 0, L", 2, 8, 0, 0xCBC5),
                0xC6 => Instruction::from("SET 0, (HL)", 2, 15, 0, 0xCBC6),
                0xC7 => Instruction::from("SET 0, A", 2, 8, 0, 0xCBC7),
                0xC8 => Instruction::from("SET 1, B", 2, 8, 0, 0xCBC8),
                0xC9 => Instruction::from("SET 1, C", 2, 8, 0, 0xCBC9),
                0xCA => Instruction::from("SET 1, D", 2, 8, 0, 0xCBCA),
                0xCB => Instruction::from("SET 1, E", 2, 8, 0, 0xCBCB),
                0xCC => Instruction::from("SET 1, H", 2, 8, 0, 0xCBCC),
                0xCD => Instruction::from("SET 1, L", 2, 8, 0, 0xCBCD),
                0xCE => Instruction::from("SET 1, (HL)", 2, 15, 0, 0xCBCE),
                0xCF => Instruction::from("SET 1, A", 2, 8, 0, 0xCBCF),
                0xD0 => Instruction::from("SET 2, B", 2, 8, 0, 0xCBD0),
                0xD1 => Instruction::from("SET 2, C", 2, 8, 0, 0xCBD1),
                0xD2 => Instruction::from("SET 2, D", 2, 8, 0, 0xCBD2),
                0xD3 => Instruction::from("SET 2, E", 2, 8, 0, 0xCBD3),
                0xD4 => Instruction::from("SET 2, H", 2, 8, 0, 0xCBD4),
                0xD5 => Instruction::from("SET 2, L", 2, 8, 0, 0xCBD5),
                0xD6 => Instruction::from("SET 2, (HL)", 2, 15, 0, 0xCBD6),
                0xD7 => Instruction::from("SET 2, A", 2, 8, 0, 0xCBD7),
                0xD8 => Instruction::from("SET 3, B", 2, 8, 0, 0xCBD8),
                0xD9 => Instruction::from("SET 3, C", 2, 8, 0, 0xCBD9),
                0xDA => Instruction::from("SET 3, D", 2, 8, 0, 0xCBDA),
                0xDB => Instruction::from("SET 3, E", 2, 8, 0, 0xCBDB),
                0xDC => Instruction::from("SET 3, H", 2, 8, 0, 0xCBDC),
                0xDD => Instruction::from("SET 3, L", 2, 8, 0, 0xCBDD),
                0xDE => Instruction::from("SET 3, (HL)", 2, 15, 0, 0xCBDE),
                0xDF => Instruction::from("SET 3, A", 2, 8, 0, 0xCBDF),
                0xE0 => Instruction::from("SET 4, B", 2, 8, 0, 0xCBE0),
                0xE1 => Instruction::from("SET 4, C", 2, 8, 0, 0xCBE1),
                0xE2 => Instruction::from("SET 4, D", 2, 8, 0, 0xCBE2),
                0xE3 => Instruction::from("SET 4, E", 2, 8, 0, 0xCBE3),
                0xE4 => Instruction::from("SET 4, H", 2, 8, 0, 0xCBE4),
                0xE5 => Instruction::from("SET 4, L", 2, 8, 0, 0xCBE5),
                0xE6 => Instruction::from("SET 4, (HL)", 2, 15, 0, 0xCBE6),
                0xE7 => Instruction::from("SET 4, A", 2, 8, 0, 0xCBE7),
                0xE8 => Instruction::from("SET 5, B", 2, 8, 0, 0xCBE8),
                0xE9 => Instruction::from("SET 5, C", 2, 8, 0, 0xCBE9),
                0xEA => Instruction::from("SET 5, D", 2, 8, 0, 0xCBEA),
                0xEB => Instruction::from("SET 5, E", 2, 8, 0, 0xCBEB),
                0xEC => Instruction::from("SET 5, H", 2, 8, 0, 0xCBEC),
                0xED => Instruction::from("SET 5, L", 2, 8, 0, 0xCBED),
                0xEE => Instruction::from("SET 5, (HL)", 2, 15, 0, 0xCBEE),
                0xEF => Instruction::from("SET 5, A", 2, 8, 0, 0xCBEF),
                0xF0 => Instruction::from("SET 6, B", 2, 8, 0, 0xCBF0),
                0xF1 => Instruction::from("SET 6, C", 2, 8, 0, 0xCBF1),
                0xF2 => Instruction::from("SET 6, D", 2, 8, 0, 0xCBF2),
                0xF3 => Instruction::from("SET 6, E", 2, 8, 0, 0xCBF3),
                0xF4 => Instruction::from("SET 6, H", 2, 8, 0, 0xCBF4),
                0xF5 => Instruction::from("SET 6, L", 2, 8, 0, 0xCBF5),
                0xF6 => Instruction::from("SET 6, (HL)", 2, 15, 0, 0xCBF6),
                0xF7 => Instruction::from("SET 6, A", 2, 8, 0, 0xCBF7),
                0xF8 => Instruction::from("SET 7, B", 2, 8, 0, 0xCBF8),
                0xF9 => Instruction::from("SET 7, C", 2, 8, 0, 0xCBF9),
                0xFA => Instruction::from("SET 7, D", 2, 8, 0, 0xCBFA),
                0xFB => Instruction::from("SET 7, E", 2, 8, 0, 0xCBFB),
                0xFC => Instruction::from("SET 7, H", 2, 8, 0, 0xCBFC),
                0xFD => Instruction::from("SET 7, L", 2, 8, 0, 0xCBFD),
                0xFE => Instruction::from("SET 7, (HL)", 2, 15, 0, 0xCBFE),
                0xFF => Instruction::from("SET 7, A", 2, 8, 0, 0xCBFF),
                _ => Instruction::from("UNKNOWN", 0, 0, 0, 0),
            },
            0xCC => Instruction::from("CALL Z, **", 3, 17, 10, 0xCC),
            0xCD => Instruction::from("CALL **", 3, 17, 0, 0xCD),
            0xCE => Instruction::from("ADC A, *", 2, 7, 0, 0xCE),
            0xCF => Instruction::from("RST 08H", 1, 11, 0, 0xCF),
            0xD0 => Instruction::from("RET NC", 1, 11, 5, 0xD0),
            0xD1 => Instruction::from("POP DE", 1, 10, 0, 0xD1),
            0xD2 => Instruction::from("JP NC, **", 3, 10, 0, 0xD2),
            0xD3 => Instruction::from("OUT (*), A", 2, 11, 0, 0xD3),
            0xD4 => Instruction::from("CALL NC, **", 3, 17, 10, 0xD4),
            0xD5 => Instruction::from("PUSH DE", 1, 11, 0, 0xD5),
            0xD6 => Instruction::from("SUB *", 2, 7, 0, 0xD6),
            0xD7 => Instruction::from("RST 10H", 1, 11, 0, 0xD7),
            0xD8 => Instruction::from("RET C", 1, 11, 5, 0xD8),
            0xD9 => Instruction::from("EXX", 1, 4, 0, 0xD9),
            0xDA => Instruction::from("JP C, **", 3, 10, 0, 0xDA),
            0xDB => Instruction::from("IN A, (*)", 2, 11, 0, 0xDB),
            0xDC => Instruction::from("CALL C, **", 3, 17, 10, 0xDC),
            0xDD => match next_op {
                0x09 => Instruction::from("ADD IX, BC", 2, 15, 0, 0xDD09),
                0x19 => Instruction::from("ADD IX, DE", 2, 15, 0, 0xDD19),
                0x21 => Instruction::from("LD IX, **", 4, 14, 0, 0xDD21),
                0x22 => Instruction::from("LD (**), IX", 4, 20, 0, 0xDD22),
                0x23 => Instruction::from("INC IX", 2, 10, 0, 0xDD23),
                0x24 => Instruction::from("INC IXH", 2, 8, 0, 0xDD24),
                0x25 => Instruction::from("DEC IXH", 2, 8, 0, 0xDD25),
                0x26 => Instruction::from("LD IXH", 3, 11, 0, 0xDD26),
                0x29 => Instruction::from("ADD IX, IX", 2, 15, 0, 0xDD29),
                0x2A => Instruction::from("LD IX, **", 4, 20, 0, 0xDD2A),
                0x2B => Instruction::from("DEC IX", 2, 10, 0, 0xDD2B),
                0x2C => Instruction::from("INC IXL", 2, 8, 0, 0xDD2C),
                0x2D => Instruction::from("DEC IXL", 2, 8, 0, 0xDD2D),
                0x2E => Instruction::from("LD IXL, *", 3, 11, 0, 0xDD2E),
                0x34 => Instruction::from("INC (IX+*)", 2, 23, 0, 0xDD34),
                0x35 => Instruction::from("DEC (IX+*)", 2, 23, 0, 0xDD35),
                0x36 => Instruction::from("LD, (IX+*), *", 4, 19, 0, 0xDD36),
                0x39 => Instruction::from("ADD IX, SP", 2, 15, 0, 0xDD39),
                0x44 => Instruction::from("LD B, IXH, *", 2, 8, 0, 0xDD44),
                0x45 => Instruction::from("LD B, IXL, *", 2, 8, 0, 0xDD45),
                0x46 => Instruction::from("LD B, (IX+*)", 3, 19, 0, 0xDD46),
                0x4C => Instruction::from("LD C, IXH", 2, 8, 0, 0xDD4C),
                0x4D => Instruction::from("LD C, IXL)", 2, 8, 0, 0xDD4D),
                0x4E => Instruction::from("LD C, (IX+*)", 3, 19, 0, 0xDD4E),
                0x54 => Instruction::from("LD D, IXH, *", 2, 8, 0, 0xDD54),
                0x55 => Instruction::from("LD D, IXL, *", 2, 8, 0, 0xDD55),
                0x56 => Instruction::from("LD D, (IX+*)", 3, 19, 0, 0xDD56),
                0x5C => Instruction::from("LD E, IXH", 2, 8, 0, 0xDD5C),
                0x5D => Instruction::from("LD E, IXL)", 2, 8, 0, 0xDD5D),
                0x5E => Instruction::from("LD E, (IX+*)", 3, 19, 0, 0xDD5E),
                0x60 => Instruction::from("LD IXH, B", 2, 8, 0, 0xDD60),
                0x61 => Instruction::from("LD IXH, C", 2, 8, 0, 0xDD61),
                0x62 => Instruction::from("LD IXH, D", 2, 8, 0, 0xDD62),
                0x63 => Instruction::from("LD IXH, E", 2, 8, 0, 0xDD63),
                0x64 => Instruction::from("LD IXH, IXH", 2, 8, 0, 0xDD64),
                0x65 => Instruction::from("LD IXH, IXL", 2, 8, 0, 0xDD65),
                0x66 => Instruction::from("LD IXH, (IX+*)", 3, 11, 0, 0xDD66),
                0x67 => Instruction::from("LD IXH, A", 2, 8, 0, 0xDD67),
                0x68 => Instruction::from("LD IXL,B", 2, 8, 0, 0xDD68),
                0x69 => Instruction::from("LD IXL,C", 2, 8, 0, 0xDD69),
                0x6A => Instruction::from("LD IXL,D", 2, 8, 0, 0xDD6A),
                0x6B => Instruction::from("LD IXL,E", 2, 8, 0, 0xDD6B),
                0x6C => Instruction::from("LD IXL,H", 2, 8, 0, 0xDD6C),
                0x6D => Instruction::from("LD IXL,L", 2, 8, 0, 0xDD6D),
                0x6E => Instruction::from("LD L (IX+*)", 3, 19, 0, 0xDD6E),
                0x6F => Instruction::from("LD IXL,A", 2, 8, 0, 0xDD6F),
                0x70 => Instruction::from("LD (IX+*), B", 3, 19, 0, 0xDD70),
                0x71 => Instruction::from("LD (IX+*), C", 3, 19, 0, 0xDD71),
                0x72 => Instruction::from("LD (IX+*), D", 3, 19, 0, 0xDD72),
                0x73 => Instruction::from("LD (IX+*), E", 3, 19, 0, 0xDD73),
                0x74 => Instruction::from("LD (IX+*), H", 3, 19, 0, 0xDD74),
                0x75 => Instruction::from("LD (IX+*), L", 3, 19, 0, 0xDD75),
                0x77 => Instruction::from("LD (IX+*), A", 3, 19, 0, 0xDD77),
                0x7C => Instruction::from("LD A, IXH", 2, 8, 0, 0xDD7C),
                0x7D => Instruction::from("LD A IXL", 2, 8, 0, 0xDD7D),
                0x7E => Instruction::from("LD A (IX+*)", 3, 19, 0, 0xDD7E),
                0x84 => Instruction::from("ADD A, IXH", 2, 8, 0, 0xDD84),
                0x85 => Instruction::from("ADD A, IXL", 2, 8, 0, 0xDD85),
                0x86 => Instruction::from("ADD A, (IX+*)", 3, 19, 0, 0xDD86),
                0x8C => Instruction::from("ADC A, IXH", 2, 8, 0, 0xDD8C),
                0x8D => Instruction::from("ADC A IXL", 2, 8, 0, 0xDD8D),
                0x8E => Instruction::from("ADC A (IX+*)", 3, 19, 0, 0xDD8E),
                0x94 => Instruction::from("SUB IXH", 2, 8, 0, 0xDD94),
                0x95 => Instruction::from("SUB IXL", 2, 8, 0, 0xDD95),
                0x96 => Instruction::from("SUB (IX+*) ", 3, 19, 0, 0xDD96),
                0x9C => Instruction::from("SBC A, IXH ", 2, 8, 0, 0xDD9C),
                0x9D => Instruction::from("SBC A, IXL", 2, 8, 0, 0xDD9D),
                0x9E => Instruction::from("SBC A, (IX+*)", 3, 19, 0, 0xDD9E),
                0xA4 => Instruction::from("AND IXH", 2, 8, 0, 0xDDA4),
                0xA5 => Instruction::from("AND IXL", 2, 8, 0, 0xDDA5),
                0xA6 => Instruction::from("AND (IX+*) ", 3, 19, 0, 0xDDA6),
                0xAC => Instruction::from("XOR IXH ", 2, 8, 0, 0xDDAC),
                0xAD => Instruction::from("XOR, IXL", 2, 8, 0, 0xDDAD),
                0xAE => Instruction::from("XOR (IX+*)", 3, 19, 0, 0xDDAE),
                0xB4 => Instruction::from("OR IXH", 2, 8, 0, 0xDDB4),
                0xB5 => Instruction::from("OR IXL", 2, 8, 0, 0xDDB5),
                0xB6 => Instruction::from("OR (IX+*) ", 3, 19, 0, 0xDDB6),
                0xBC => Instruction::from("CP IXH ", 2, 8, 0, 0xDDBC),
                0xBD => Instruction::from("CP IXL", 2, 8, 0, 0xDDBD),
                0xBE => Instruction::from("CP (IX+*)", 3, 19, 0, 0xDDBE),
                0xE1 => Instruction::from("POP IX", 2, 14, 0, 0xDDE1),
                0xE3 => Instruction::from("EX (SP), IX", 2, 23, 0, 0xDDE3),
                0xE5 => Instruction::from("PUSH IX", 2, 15, 0, 0xDDE5),
                0xE9 => Instruction::from("JP (IX)", 2, 8, 0, 0xDDE9),
                0xF9 => Instruction::from("LD SP, IX", 2, 10, 0, 0xDDF9),
                _ => panic!("Unknown opcode:{:04x}", opcode + next_op),
            },
            // TODO FIX
            0xDDCB => {
                match next_op {
                    // IX BIT INstructions (DDCB)
                    0x00 => Instruction::from("RLC (IX+*), B", 4, 23, 0, 0x00),
                    0x01 => Instruction::from("RLC (IX+*), C", 4, 23, 0, 0x01),
                    0x02 => Instruction::from("RLC (IX+*), D", 4, 23, 0, 0x02),
                    0x03 => Instruction::from("RLC (IX+*), E", 4, 23, 0, 0x03),
                    0x04 => Instruction::from("RLC (IX+*), H", 4, 23, 0, 0x04),
                    0x05 => Instruction::from("RLC (IX+*), L", 4, 23, 0, 0x05),
                    0x06 => Instruction::from("RLC (IX+*)", 4, 23, 0, 0x06),
                    0x07 => Instruction::from("RLC (IX+*), A", 4, 23, 0, 0x07),
                    0x08 => Instruction::from("RRC (IX+*), B", 4, 23, 0, 0x08),
                    0x09 => Instruction::from("RRC (IX+*), C", 4, 23, 0, 0x09),
                    0x0A => Instruction::from("RRC (IX+*), D", 4, 23, 0, 0x0A),
                    0x0B => Instruction::from("RRC (IX+*), E", 4, 23, 0, 0x0B),
                    0x0C => Instruction::from("RRC (IX+*), H", 4, 23, 0, 0x0C),
                    0x0D => Instruction::from("RRC (IX+*), L", 4, 23, 0, 0x0D),
                    0x0E => Instruction::from("RRC (IX+*)", 4, 23, 0, 0x0E),
                    0x0F => Instruction::from("RRC (IX+*, A", 4, 23, 0, 0x0F),
                    0x10 => Instruction::from("RL (IX+*), B", 4, 23, 0, 0x10),
                    0x11 => Instruction::from("RL (IX+*), C", 4, 23, 0, 0x11),
                    0x12 => Instruction::from("RL (IX+*), D", 4, 23, 0, 0x12),
                    0x13 => Instruction::from("RL (IX+*), E", 4, 23, 0, 0x13),
                    0x14 => Instruction::from("RL (IX+*), H", 4, 23, 0, 0x14),
                    0x15 => Instruction::from("RL (IX+*), L", 4, 23, 0, 0x15),
                    0x16 => Instruction::from("RL (IX+*)", 4, 23, 0, 0x16),
                    0x17 => Instruction::from("RL (IX+*), A", 4, 23, 0, 0x17),
                    0x18 => Instruction::from("RR (IX+*), B", 4, 23, 0, 0x18),
                    0x19 => Instruction::from("RR (IX+*), C", 4, 23, 0, 0x19),
                    0x1A => Instruction::from("RR (IX+*), D", 4, 23, 0, 0x1A),
                    0x1B => Instruction::from("RR (IX+*), E", 4, 23, 0, 0x1B),
                    0x1C => Instruction::from("RR (IX+*), H", 4, 23, 0, 0x1C),
                    0x1D => Instruction::from("RR (IX+*), L", 4, 23, 0, 0x1D),
                    0x1E => Instruction::from("RR (IX+*)", 4, 23, 0, 0x1E),
                    0x1F => Instruction::from("RR (IX+*), A", 4, 23, 0, 0x1F),
                    0x20 => Instruction::from("SLA (IX+*), B", 4, 23, 0, 0x20),
                    0x21 => Instruction::from("SLA (IX+*), C", 4, 23, 0, 0x21),
                    0x22 => Instruction::from("SLA (IX+*), D", 4, 23, 0, 0x22),
                    0x23 => Instruction::from("SLA (IX+*), E", 4, 23, 0, 0x23),
                    0x24 => Instruction::from("SLA (IX+*), H", 4, 23, 0, 0x24),
                    0x25 => Instruction::from("SLA (IX+*), L", 4, 23, 0, 0x25),
                    0x26 => Instruction::from("SLA (IX+*)", 4, 23, 0, 0x26),
                    0x27 => Instruction::from("SLA (IX+*), A", 4, 23, 0, 0x27),
                    0x28 => Instruction::from("SRA (IX+*), B", 4, 23, 0, 0x28),
                    0x29 => Instruction::from("SRA (IX+*), C", 4, 23, 0, 0x29),
                    0x2A => Instruction::from("SRA (IX+*), D", 4, 23, 0, 0x2A),
                    0x2B => Instruction::from("SRA (IX+*), E", 4, 23, 0, 0x2B),
                    0x2C => Instruction::from("SRA (IX+*), H", 4, 23, 0, 0x2C),
                    0x2D => Instruction::from("SRA (IX+*), L", 4, 23, 0, 0x2D),
                    0x2E => Instruction::from("SRA (IX+*)", 4, 23, 0, 0x2E),
                    0x2F => Instruction::from("SRA (IX+*), A", 4, 23, 0, 0x2F),
                    0x30 => Instruction::from("SLL(IX+*), B", 4, 23, 0, 0x30),
                    0x31 => Instruction::from("SLL(IX+*), C", 4, 23, 0, 0x31),
                    0x32 => Instruction::from("SLL(IX+*), D", 4, 23, 0, 0x32),
                    0x33 => Instruction::from("SLL(IX+*), E", 4, 23, 0, 0x33),
                    0x34 => Instruction::from("SLL(IX+*), H", 4, 23, 0, 0x34),
                    0x35 => Instruction::from("SLL(IX+*), L", 4, 23, 0, 0x35),
                    0x36 => Instruction::from("SLL(IX+*)", 4, 23, 0, 0x36),
                    0x37 => Instruction::from("SLL(IX+*), A", 4, 23, 0, 0x37),
                    0x38 => Instruction::from("SRL (IX+*), B", 4, 23, 0, 0x38),
                    0x39 => Instruction::from("SRL (IX+*), C", 4, 23, 0, 0x39),
                    0x3A => Instruction::from("SRL (IX+*), D", 4, 23, 0, 0x3A),
                    0x3B => Instruction::from("SRL (IX+*), E", 4, 23, 0, 0x3B),
                    0x3C => Instruction::from("SRL (IX+*), H", 4, 23, 0, 0x3C),
                    0x3D => Instruction::from("SRL (IX+*), L", 4, 23, 0, 0x3D),
                    0x3E => Instruction::from("SRL (IX+*)", 4, 23, 0, 0x3E),
                    0x3F => Instruction::from("SRL (IX+*), A", 4, 23, 0, 0x3F),
                    0x40 => Instruction::from("BIT 0, (IX+*)", 4, 20, 0, 0x40),
                    0x41 => Instruction::from("BIT 0, (IX+*)", 4, 20, 0, 0x41),
                    0x42 => Instruction::from("BIT 0, (IX+*)", 4, 20, 0, 0x42),
                    0x43 => Instruction::from("BIT 0, (IX+*)", 4, 20, 0, 0x43),
                    0x44 => Instruction::from("BIT 0, (IX+*)", 4, 20, 0, 0x44),
                    0x45 => Instruction::from("BIT 0, (IX+*)", 4, 20, 0, 0x45),
                    0x46 => Instruction::from("BIT 0, (IX+*)", 4, 20, 0, 0x46),
                    0x47 => Instruction::from("BIT 0, (IX+*)", 4, 20, 0, 0x47),
                    0x48 => Instruction::from("BIT 1, (IX+*)", 4, 20, 0, 0x48),
                    0x49 => Instruction::from("BIT 1, (IX+*)", 4, 20, 0, 0x49),
                    0x4A => Instruction::from("BIT 1, (IX+*)", 4, 20, 0, 0x4A),
                    0x4B => Instruction::from("BIT 1, (IX+*)", 4, 20, 0, 0x4B),
                    0x4C => Instruction::from("BIT 1, (IX+*)", 4, 20, 0, 0x4C),
                    0x4D => Instruction::from("BIT 1, (IX+*)", 4, 20, 0, 0x4D),
                    0x4E => Instruction::from("BIT 1, (IX+*)", 4, 20, 0, 0x4E),
                    0x4F => Instruction::from("BIT 1, (IX+*)", 4, 20, 0, 0x4F),
                    0x50 => Instruction::from("BIT 2, (IX+*)", 4, 20, 0, 0x50),
                    0x51 => Instruction::from("BIT 2, (IX+*)", 4, 20, 0, 0x51),
                    0x52 => Instruction::from("BIT 2, (IX+*)", 4, 20, 0, 0x52),
                    0x53 => Instruction::from("BIT 2, (IX+*)", 4, 20, 0, 0x53),
                    0x54 => Instruction::from("BIT 2, (IX+*)", 4, 20, 0, 0x54),
                    0x55 => Instruction::from("BIT 2, (IX+*)", 4, 20, 0, 0x55),
                    0x56 => Instruction::from("BIT 2, (IX+*)", 4, 20, 0, 0x56),
                    0x57 => Instruction::from("BIT 2, (IX+*)", 4, 20, 0, 0x57),
                    0x58 => Instruction::from("BIT 3, (IX+*)", 4, 20, 0, 0x58),
                    0x59 => Instruction::from("BIT 3, (IX+*)", 4, 20, 0, 0x59),
                    0x5A => Instruction::from("BIT 3, (IX+*)", 4, 20, 0, 0x5A),
                    0x5B => Instruction::from("BIT 3, (IX+*)", 4, 20, 0, 0x5B),
                    0x5C => Instruction::from("BIT 3, (IX+*)", 4, 20, 0, 0x5C),
                    0x5D => Instruction::from("BIT 3, (IX+*)", 4, 20, 0, 0x5D),
                    0x5E => Instruction::from("BIT 3, (IX+*)", 4, 20, 0, 0x5E),
                    0x5F => Instruction::from("BIT 3, (IX+*)", 4, 20, 0, 0x5F),
                    0x60 => Instruction::from("BIT 4, (IX+*)", 4, 20, 0, 0x60),
                    0x61 => Instruction::from("BIT 4, (IX+*)", 4, 20, 0, 0x61),
                    0x62 => Instruction::from("BIT 4, (IX+*)", 4, 20, 0, 0x62),
                    0x63 => Instruction::from("BIT 4, (IX+*)", 4, 20, 0, 0x63),
                    0x64 => Instruction::from("BIT 4, (IX+*)", 4, 20, 0, 0x64),
                    0x65 => Instruction::from("BIT 4, (IX+*)", 4, 20, 0, 0x65),
                    0x66 => Instruction::from("BIT 4, (IX+*)", 4, 20, 0, 0x66),
                    0x67 => Instruction::from("BIT 4, (IX+*)", 4, 20, 0, 0x67),
                    0x68 => Instruction::from("BIT 5, (IX+*)", 4, 20, 0, 0x68),
                    0x69 => Instruction::from("BIT 5, (IX+*)", 4, 20, 0, 0x69),
                    0x6A => Instruction::from("BIT 5, (IX+*)", 4, 20, 0, 0x6A),
                    0x6B => Instruction::from("BIT 5, (IX+*)", 4, 20, 0, 0x6B),
                    0x6C => Instruction::from("BIT 5, (IX+*)", 4, 20, 0, 0x6C),
                    0x6D => Instruction::from("BIT 5, (IX+*)", 4, 20, 0, 0x6D),
                    0x6E => Instruction::from("BIT 5, (IX+*)", 4, 20, 0, 0x6E),
                    0x6F => Instruction::from("BIT 5, (IX+*)", 4, 20, 0, 0x6F),
                    0x70 => Instruction::from("BIT 6, (IX+*)", 4, 20, 0, 0x70),
                    0x71 => Instruction::from("BIT 6, (IX+*)", 4, 20, 0, 0x71),
                    0x72 => Instruction::from("BIT 6, (IX+*)", 4, 20, 0, 0x72),
                    0x73 => Instruction::from("BIT 6, (IX+*)", 4, 20, 0, 0x73),
                    0x74 => Instruction::from("BIT 6, (IX+*)", 4, 20, 0, 0x74),
                    0x75 => Instruction::from("BIT 6, (IX+*)", 4, 20, 0, 0x75),
                    0x76 => Instruction::from("BIT 6, (IX+*)", 4, 20, 0, 0x76),
                    0x77 => Instruction::from("BIT 6, (IX+*)", 4, 20, 0, 0x77),
                    0x78 => Instruction::from("BIT 7, (IX+*)", 4, 20, 0, 0x78),
                    0x79 => Instruction::from("BIT 7, (IX+*)", 4, 20, 0, 0x79),
                    0x7A => Instruction::from("BIT 7, (IX+*)", 4, 20, 0, 0x7A),
                    0x7B => Instruction::from("BIT 7, (IX+*)", 4, 20, 0, 0x7B),
                    0x7C => Instruction::from("BIT 7, (IX+*)", 4, 20, 0, 0x7C),
                    0x7D => Instruction::from("BIT 7, (IX+*)", 4, 20, 0, 0x7D),
                    0x7E => Instruction::from("BIT 7, (IX+*)", 4, 20, 0, 0x7E),
                    0x7F => Instruction::from("BIT 7, (IX+*)", 4, 20, 0, 0x7F),
                    0x80 => Instruction::from("RES 0, (IX+*), B", 4, 23, 0, 0x80),
                    0x81 => Instruction::from("RES 0, (IX+*), C", 4, 23, 0, 0x81),
                    0x82 => Instruction::from("RES 0, (IX+*), D", 4, 23, 0, 0x82),
                    0x83 => Instruction::from("RES 0, (IX+*), E", 4, 23, 0, 0x83),
                    0x84 => Instruction::from("RES 0, (IX+*), H", 4, 23, 0, 0x84),
                    0x85 => Instruction::from("RES 0, (IX+*), L", 4, 23, 0, 0x85),
                    0x86 => Instruction::from("RES 0, (IX+*)", 4, 23, 0, 0x86),
                    0x87 => Instruction::from("RES 0, (IX+*), A", 4, 23, 0, 0x87),
                    0x88 => Instruction::from("RES 1, (IX+*), B", 4, 23, 0, 0x88),
                    0x89 => Instruction::from("RES 1, (IX+*), C", 4, 23, 0, 0x89),
                    0x8A => Instruction::from("RES 1, (IX+*), D", 4, 23, 0, 0x8A),
                    0x8B => Instruction::from("RES 1, (IX+*), E", 4, 23, 0, 0x8B),
                    0x8C => Instruction::from("RES 1, (IX+*), H", 4, 23, 0, 0x8C),
                    0x8D => Instruction::from("RES 1, (IX+*), L", 4, 23, 0, 0x8D),
                    0x8E => Instruction::from("RES 1, (IX+*)", 4, 23, 0, 0x8E),
                    0x8F => Instruction::from("RES 1, (IX+*), A", 4, 23, 0, 0x8F),
                    0x90 => Instruction::from("RES 2, (IX+*), B", 4, 23, 0, 0x90),
                    0x91 => Instruction::from("RES 2, (IX+*), C", 4, 23, 0, 0x91),
                    0x92 => Instruction::from("RES 2, (IX+*), D", 4, 23, 0, 0x92),
                    0x93 => Instruction::from("RES 2, (IX+*), E", 4, 23, 0, 0x93),
                    0x94 => Instruction::from("RES 2, (IX+*), H", 4, 23, 0, 0x94),
                    0x95 => Instruction::from("RES 2, (IX+*), L", 4, 23, 0, 0x95),
                    0x96 => Instruction::from("RES 2, (IX+*)", 4, 23, 0, 0x96),
                    0x97 => Instruction::from("RES 2, (IX+*), A", 4, 23, 0, 0x97),
                    0x98 => Instruction::from("RES 3, (IX+*), B", 4, 23, 0, 0x98),
                    0x99 => Instruction::from("RES 3, (IX+*), C", 4, 23, 0, 0x99),
                    0x9A => Instruction::from("RES 3, (IX+*), D", 4, 23, 0, 0x9A),
                    0x9B => Instruction::from("RES 3, (IX+*), E", 4, 23, 0, 0x9B),
                    0x9C => Instruction::from("RES 3, (IX+*), H", 4, 23, 0, 0x9C),
                    0x9D => Instruction::from("RES 3, (IX+*), L", 4, 23, 0, 0x9D),
                    0x9E => Instruction::from("RES 3, (IX+*)", 4, 23, 0, 0x9E),
                    0x9F => Instruction::from("RES 3, (IX+*), A", 4, 23, 0, 0x9F),
                    0xA0 => Instruction::from("RES 4, (IX+*), B", 4, 23, 0, 0xA0),
                    0xA1 => Instruction::from("RES 4, (IX+*), C", 4, 23, 0, 0xA1),
                    0xA2 => Instruction::from("RES 4, (IX+*), D", 4, 23, 0, 0xA2),
                    0xA3 => Instruction::from("RES 4, (IX+*), E", 4, 23, 0, 0xA3),
                    0xA4 => Instruction::from("RES 4, (IX+*), H", 4, 23, 0, 0xA4),
                    0xA5 => Instruction::from("RES 4, (IX+*), L", 4, 23, 0, 0xA5),
                    0xA6 => Instruction::from("RES 4, (IX+*)", 4, 23, 0, 0xA6),
                    0xA7 => Instruction::from("RES 4, (IX+*), A", 4, 23, 0, 0xA7),
                    0xA8 => Instruction::from("RES 5, (IX+*), B", 4, 23, 0, 0xA8),
                    0xA9 => Instruction::from("RES 5, (IX+*), C", 4, 23, 0, 0xA9),
                    0xAA => Instruction::from("RES 5, (IX+*), D", 4, 23, 0, 0xAA),
                    0xAB => Instruction::from("RES 5, (IX+*), E", 4, 23, 0, 0xAB),
                    0xAC => Instruction::from("RES 5, (IX+*), H", 4, 23, 0, 0xAC),
                    0xAD => Instruction::from("RES 5, (IX+*), L", 4, 23, 0, 0xAD),
                    0xAE => Instruction::from("RES 5, (IX+*)", 4, 23, 0, 0xAE),
                    0xAF => Instruction::from("RES 5, (IX+*), A", 4, 23, 0, 0xAF),
                    0xB0 => Instruction::from("RES 6, (IX+*), B", 4, 23, 0, 0xB0),
                    0xB1 => Instruction::from("RES 6, (IX+*), C", 4, 23, 0, 0xB1),
                    0xB2 => Instruction::from("RES 6, (IX+*), D", 4, 23, 0, 0xB2),
                    0xB3 => Instruction::from("RES 6, (IX+*), E", 4, 23, 0, 0xB3),
                    0xB4 => Instruction::from("RES 6, (IX+*), H", 4, 23, 0, 0xB4),
                    0xB5 => Instruction::from("RES 6, (IX+*), L", 4, 23, 0, 0xB5),
                    0xB6 => Instruction::from("RES 6, (IX+*)", 4, 23, 0, 0xB6),
                    0xB7 => Instruction::from("RES 6, (IX+*), A", 4, 23, 0, 0xB7),
                    0xB8 => Instruction::from("RES 7, (IX+*), B", 4, 23, 0, 0xB8),
                    0xB9 => Instruction::from("RES 7, (IX+*), C", 4, 23, 0, 0xB9),
                    0xBA => Instruction::from("RES 7, (IX+*), D", 4, 23, 0, 0xBA),
                    0xBB => Instruction::from("RES 7, (IX+*), E", 4, 23, 0, 0xBB),
                    0xBC => Instruction::from("RES 7, (IX+*), H", 4, 23, 0, 0xBC),
                    0xBD => Instruction::from("RES 7, (IX+*), L", 4, 23, 0, 0xBD),
                    0xBE => Instruction::from("RES 7, (IX+*)", 4, 23, 0, 0xBE),
                    0xBF => Instruction::from("RES 7, (IX+*), A", 4, 23, 0, 0xBF),
                    0xC0 => Instruction::from("SET 0, (IX+*), B", 4, 23, 0, 0xC0),
                    0xC1 => Instruction::from("SET 0, (IX+*), C", 4, 23, 0, 0xC1),
                    0xC2 => Instruction::from("SET 0, (IX+*), D", 4, 23, 0, 0xC2),
                    0xC3 => Instruction::from("SET 0, (IX+*), E", 4, 23, 0, 0xC3),
                    0xC4 => Instruction::from("SET 0, (IX+*), H", 4, 23, 0, 0xC4),
                    0xC5 => Instruction::from("SET 0, (IX+*), L", 4, 23, 0, 0xC5),
                    0xC6 => Instruction::from("SET 0, (IX+*)", 4, 23, 0, 0xC6),
                    0xC7 => Instruction::from("SET 0, (IX+*), A", 4, 23, 0, 0xC7),
                    0xC8 => Instruction::from("SET 1, (IX+*), B", 4, 23, 0, 0xC8),
                    0xC9 => Instruction::from("SET 1, (IX+*), C", 4, 23, 0, 0xC9),
                    0xCA => Instruction::from("SET 1, (IX+*), D", 4, 23, 0, 0xCA),
                    0xCB => Instruction::from("SET 1, (IX+*), E", 4, 23, 0, 0xCB),
                    0xCC => Instruction::from("SET 1, (IX+*), H", 4, 23, 0, 0xCC),
                    0xCD => Instruction::from("SET 1, (IX+*), L", 4, 23, 0, 0xCD),
                    0xCE => Instruction::from("SET 1, (IX+*)", 4, 23, 0, 0xCE),
                    0xCF => Instruction::from("SET 1, (IX+*), A", 4, 23, 0, 0xCF),
                    0xD0 => Instruction::from("SET 2, (IX+*), B", 4, 23, 0, 0xD0),
                    0xD1 => Instruction::from("SET 2, (IX+*), C", 4, 23, 0, 0xD1),
                    0xD2 => Instruction::from("SET 2, (IX+*), D", 4, 23, 0, 0xD2),
                    0xD3 => Instruction::from("SET 2, (IX+*), E", 4, 23, 0, 0xD3),
                    0xD4 => Instruction::from("SET 2, (IX+*), H", 4, 23, 0, 0xD4),
                    0xD5 => Instruction::from("SET 2, (IX+*), L", 4, 23, 0, 0xD5),
                    0xD6 => Instruction::from("SET 2, (IX+*)", 4, 23, 0, 0xD6),
                    0xD7 => Instruction::from("SET 2, (IX+*), A", 4, 23, 0, 0xD7),
                    0xD8 => Instruction::from("SET 3, (IX+*), B", 4, 23, 0, 0xD8),
                    0xD9 => Instruction::from("SET 3, (IX+*), C", 4, 23, 0, 0xD9),
                    0xDA => Instruction::from("SET 3, (IX+*), D", 4, 23, 0, 0xDA),
                    0xDB => Instruction::from("SET 3, (IX+*), E", 4, 23, 0, 0xDB),
                    0xDC => Instruction::from("SET 3, (IX+*), H", 4, 23, 0, 0xDC),
                    0xDD => Instruction::from("SET 3, (IX+*), L", 4, 23, 0, 0xDD),
                    0xDE => Instruction::from("SET 3, (IX+*)", 4, 23, 0, 0xDE),
                    0xDF => Instruction::from("SET 3, (IX+*), A", 4, 23, 0, 0xDF),
                    0xE0 => Instruction::from("SET 4, (IX+*), B", 4, 23, 0, 0xE0),
                    0xE1 => Instruction::from("SET 4, (IX+*), C", 4, 23, 0, 0xE1),
                    0xE2 => Instruction::from("SET 4, (IX+*), D", 4, 23, 0, 0xE2),
                    0xE3 => Instruction::from("SET 4, (IX+*), E", 4, 23, 0, 0xE3),
                    0xE4 => Instruction::from("SET 4, (IX+*), H", 4, 23, 0, 0xE4),
                    0xE5 => Instruction::from("SET 4, (IX+*), L", 4, 23, 0, 0xE5),
                    0xE6 => Instruction::from("SET 4, (IX+*)", 4, 23, 0, 0xE6),
                    0xE7 => Instruction::from("SET 4, (IX+*), A", 4, 23, 0, 0xE7),
                    0xE8 => Instruction::from("SET 5, (IX+*), B", 4, 23, 0, 0xE8),
                    0xE9 => Instruction::from("SET 5, (IX+*), C", 4, 23, 0, 0xE9),
                    0xEA => Instruction::from("SET 5, (IX+*), D", 4, 23, 0, 0xEA),
                    0xEB => Instruction::from("SET 5, (IX+*), E", 4, 23, 0, 0xEB),
                    0xEC => Instruction::from("SET 5, (IX+*), H", 4, 23, 0, 0xEC),
                    0xED => Instruction::from("SET 5, (IX+*), L", 4, 23, 0, 0xED),
                    0xEE => Instruction::from("SET 5, (IX+*)", 4, 23, 0, 0xEE),
                    0xEF => Instruction::from("SET 5, (IX+*), A", 4, 23, 0, 0xEF),
                    0xF0 => Instruction::from("SET 6, (IX+*), B", 4, 23, 0, 0xF0),
                    0xF1 => Instruction::from("SET 6, (IX+*), C", 4, 23, 0, 0xF1),
                    0xF2 => Instruction::from("SET 6, (IX+*), D", 4, 23, 0, 0xF2),
                    0xF3 => Instruction::from("SET 6, (IX+*), E", 4, 23, 0, 0xF3),
                    0xF4 => Instruction::from("SET 6, (IX+*), H", 4, 23, 0, 0xF4),
                    0xF5 => Instruction::from("SET 6, (IX+*), L", 4, 23, 0, 0xF5),
                    0xF6 => Instruction::from("SET 6, (IX+*)", 4, 23, 0, 0xF6),
                    0xF7 => Instruction::from("SET 6, (IX+*), A", 4, 23, 0, 0xF7),
                    0xF8 => Instruction::from("SET 7, (IX+*), B", 4, 23, 0, 0xF8),
                    0xF9 => Instruction::from("SET 7, (IX+*), C", 4, 23, 0, 0xF9),
                    0xFA => Instruction::from("SET 7, (IX+*), D", 4, 23, 0, 0xFA),
                    0xFB => Instruction::from("SET 7, (IX+*), E", 4, 23, 0, 0xFB),
                    0xFC => Instruction::from("SET 7, (IX+*), H", 4, 23, 0, 0xFC),
                    0xFD => Instruction::from("SET 7, (IX+*), L", 4, 23, 0, 0xFD),
                    0xFE => Instruction::from("SET 7, (IX+*)", 4, 23, 0, 0xFE),
                    0xFF => Instruction::from("SET 7, (IX+*), A", 4, 23, 0, 0xFF),
                    _ => unimplemented!("DDCB instruction not found"),
                }
            }
            0xDE => Instruction::from("SBC A,*", 2, 7, 0, 0xDE),
            0xDF => Instruction::from("RST 18H", 1, 11, 0, 0xDF),
            0xE0 => Instruction::from("RET PO", 1, 11, 5, 0xE0),
            0xE1 => Instruction::from("POP HL", 1, 10, 0, 0xE1),
            0xE2 => Instruction::from("JP PO, **", 3, 10, 0, 0xE2),
            0xE3 => Instruction::from("EX (SP), HL", 1, 19, 0, 0xE3),
            0xE4 => Instruction::from("CALL PO, **", 3, 17, 10, 0xE4),
            0xE5 => Instruction::from("PUSH HL", 1, 11, 0, 0xE5),
            0xE6 => Instruction::from("AND *", 2, 7, 0, 0xE6),
            0xE7 => Instruction::from("RST 20H", 1, 11, 0, 0xE7),
            0xE8 => Instruction::from("RET PE", 1, 11, 5, 0xE8),
            0xE9 => Instruction::from("JP (HL)", 1, 4, 0, 0xE9),
            0xEA => Instruction::from("JP PE, **", 3, 10, 0, 0xEA),
            0xEB => Instruction::from("EX DE, HL", 1, 4, 0, 0xEB),
            0xEC => Instruction::from("CALL PE, **", 3, 17, 10, 0xEC),
            0xED => match next_op {
                // TODO Extended instructions
                0xB0 => Instruction::from("LDIR", 2, 21, 16, 0xEDB0),
                0x40 => Instruction::from("IM 0/1", 2, 8, 0, 0xED5E),
                0x42 => Instruction::from("SBC (**), BC", 4, 20, 0, 0xED42),
                0x43 => Instruction::from("LD (**), BC", 4, 20, 0, 0xED43),
                0x46 => Instruction::from("IM 1", 2, 8, 0, 0xED46),
                0x47 => Instruction::from("LD I, A", 2, 9, 0, 0xED47),
                0x4F => Instruction::from("LD R, A", 2, 9, 0, 0xED4F),
                0x52 => Instruction::from("SBC (**), DE", 4, 20, 0, 0xED52),
                0x53 => Instruction::from("LD (**), DE", 4, 20, 0, 0xED53),
                0x56 => Instruction::from("IM 2", 2, 8, 0, 0xED56),
                0x57 => Instruction::from("LD A, I", 2, 9, 0, 0xED57),
                0x5E => Instruction::from("IM 2", 2, 8, 0, 0xED5E),
                0x5B => Instruction::from("LD DE, (**)", 4, 20, 0, 0xED5F),
                0x5F => Instruction::from("LD A,R", 2, 9, 0, 0xED5F),
                0x62 => Instruction::from("SBC (**), HL", 4, 20, 0, 0xED62),
                0x63 => Instruction::from("LD (**), HL", 4, 20, 0, 0xED63),
                0x66 => Instruction::from("IM 0", 2, 8, 0, 0xED66),
                0x6E => Instruction::from("IM 0/1", 2, 8, 0, 0xED6E),
                0x72 => Instruction::from("SBC (**), SP", 4, 20, 0, 0xED72),
                0x73 => Instruction::from("LD (**), SP", 4, 20, 0, 0xED73),
                0x76 => Instruction::from("IM 1", 2, 8, 0, 0xED76),
                0x7E => Instruction::from("IM 2", 2, 8, 0, 0xED7E),
                0x7B => Instruction::from("LD SP, (**)", 4, 20, 0, 0xED7B),
                _ => panic!("Unknown opcode:{:02X}{:02X}", opcode, next_op),
            },
            0xEE => Instruction::from("XOR *", 2, 7, 0, 0xEE),
            0xEF => Instruction::from("RST 28H", 1, 11, 0, 0xEF),
            0xF0 => Instruction::from("RET P", 1, 11, 5, 0xF0),
            0xF1 => Instruction::from("POP AF", 1, 10, 0, 0xF1),
            0xF2 => Instruction::from("JP P, **", 3, 10, 0, 0xF2),
            0xF3 => Instruction::from("DI", 1, 4, 0, 0xF3),
            0xF4 => Instruction::from("CALL P, **", 3, 17, 10, 0xF4),
            0xF5 => Instruction::from("PUSH AF", 1, 11, 0, 0xF5),
            0xF6 => Instruction::from("OR *", 2, 7, 0, 0xF6),
            0xF7 => Instruction::from("RST 30H", 1, 11, 0, 0xF7),
            0xF8 => Instruction::from("RET M", 1, 11, 5, 0xF8),
            0xF9 => Instruction::from("LD SP, HL", 1, 6, 0, 0xF9),
            0xFA => Instruction::from("JP M, **", 3, 10, 0, 0xFA),
            0xFB => Instruction::from("EI", 1, 4, 0, 0xFB),
            0xFC => Instruction::from("CALL M, **", 3, 17, 10, 0xFC),
            0xFD => match next_op {
                0x09 => Instruction::from("ADD IY, BC", 2, 15, 0, 0xFD09),
                0x19 => Instruction::from("ADD IY, **", 2, 15, 0, 0xFD19),
                0x21 => Instruction::from("LD IY, **", 4, 14, 0, 0xFD21),
                0x22 => Instruction::from("LD (**), IY", 4, 20, 0, 0xFD22),
                0x23 => Instruction::from("INC IY", 2, 10, 0, 0xFD23),
                0x29 => Instruction::from("ADD IY, **", 2, 15, 0, 0xFD29),
                0x39 => Instruction::from("ADD IY, **", 2, 15, 0, 0xFD39),
                0x66 => Instruction::from("LD H, (IY+*)", 3, 19, 0, 0xFD66),
                0x6E => Instruction::from("LD L, IY+*", 3, 19, 0, 0xFD6E),

                0x7E => Instruction::from("LD A, (IY+*)", 3, 19, 0, 0xFD7E),
                0xE1 => Instruction::from("POP IY", 2, 14, 0, 0xFDE1),
                0xE5 => Instruction::from("PUSH IY", 2, 15, 0, 0xFDE5),
                0xE9 => Instruction::from("SUB IYH", 2, 8, 0, 0xFDE9),
                _ => panic!("Unknown opcode:{:02x}{:02x}", opcode, next_op),
            },
            0xFE => Instruction::from("CP *", 2, 7, 0, 0xFE),
            0xFF => Instruction::from("RST 38H", 1, 11, 0, 0xFF),
            _ => Instruction {
                name: "Unknown".to_string(),
                bytes: 0,
                cycles: 0,
                alt_cycles: 0,
                opcode,
            },
        })
    }
}
